# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZZlMfDM-6fbTcsI_GQbK1G0zMurkW-rc

**Đặng Thành Nhân-MSSV:522H0006-Nhóm 8 tổ 2 -Lab4**
"""

# Exercise 1
import sympy as sp

# a
x, y, z = sp.symbols('x, y, z')

eq1 = sp.Eq(x + 2*y + z, 0)
eq2 = sp.Eq(2*x - y + z, 0)
eq3 = sp.Eq(2*x + y, 0)

sol = sp.solve((eq1, eq2, eq3), (x, y, z))
print("a)")
print("Solution = ", sol)
print()

if x in sol:
  print("x = ", sol[x])
if x in sol:
  print("y = ", sol[y])
if x in sol:
  print("z = ", sol[z])
print()

# b
x, y, z, t = sp.symbols("x, y, z, t")

eq1 = sp.Eq(2*x + y + z + t, 1)
eq2 = sp.Eq(x + 2*y + z + t, 1)
eq3 = sp.Eq(x + y + 2*z + 2*t, 1)
eq4 = sp.Eq(x + y + z + 2*t, 1)

sol1 = sp.solve((eq1, eq2, eq3, eq4), (x, y, z, t))
print("b)")
print("Solution = ", sol1)

if x in sol1:
  print("x = ", sol1[x])
if x in sol1:
  print("y = ", sol1[y])
if x in sol1:
  print("z = ", sol1[z])
if x in sol1:
  print("t = ", sol1[t])

# Exercise 2
import sympy as sp
import numpy as np
import matplotlib.pyplot as plt

def plot2DEquation(x_arr, a, b, c):
  """
  This function plots the linear equation ax + by = c in a 2D coordinate system.
  x_arr: values on the x-axis
  Function: ax + by = c
  """
  if b != 0:  # y = -(a/b)*x + c/b  = (1/b)*(-a*x + c)
    fx = lambda x: (c - a*x)/b  #note that y=f(x)
    y_arr = list( map(fx, x_arr) )
    plt.plot(x_arr, y_arr, label = str(a) + "*x + " + str(b) + "*y = " + str(c))
  else: # ax = c
    if a != 0:
      x_arr_new = np.full(len(x_arr), c/a)  #x = c/a
      print("x_arr_new = ",x_arr_new)
      y_arr = np.linspace(-10, 10, num = len(x_arr)) #values -10 10 need to be modified based on the linear system
      plt.plot(x_arr_new, y_arr, label = str(a) + "*x = " + str(c))
    else:
      print("Cannot plot this function!")

x_arr = np.arange(-10, 10.1, 0.1)

# a
plot2DEquation(x_arr, 1, 1, 0)
plot2DEquation(x_arr, 1, -1, 2)
plt.title("System 1 - One solution")
plt.legend()
plt.grid()
plt.show()
print()

# b
plot2DEquation(x_arr, 1, 1, 0)
plot2DEquation(x_arr, 1, 1, 3)
plt.title("System 2 - Two solution")
plt.legend()
plt.grid()
plt.show()
print()

# c
x1 = np.arange(1, 5, 1)
x2 = np.arange(4, 10 ,1)
plot2DEquation(x1, 1, 1, 2)
plot2DEquation(x2, 2, 2, 4)
plt.title("System 3 - Three solution")
plt.legend()
plt.grid()
plt.show()
print()

# Exercise 3
import numpy as np
import matplotlib.pyplot as plt

def plotEquation3D(ax, x_arr, a, b, c, d, color):
  """
  This function plots the linear equation ax + by + cz = d in a 3D coordinate system.
  ax: axes
  x_arr: values on the x-axis
  color: color of the graph
  """
  if c != 0:
    z_func = lambda x, y: (d - a*x - b*y) / c
    y_arr = x_arr.copy()
    X,Y = np.meshgrid(x_arr, y_arr) #a grid of points created from all combinations of x-values and y-values
    Z = z_func(X, Y) # evaluation of the z-function on the grid
    ax.plot_surface(X, Y, Z, color = color)
  else:
    #Google search "python plot a 2D line in 3d"
    if b != 0:
      y_func = lambda x: (d - a*x)/b
      y_arr = list( map(y_func, x_arr) )
      ax.plot(x_arr, y_arr, zdir='z', zs=-50, color=color)
      #print(y_arr)
    else:
      if a != 0:
        x_arr_new = np.full(len(x_arr), d/a)
        y_arr = np.linspace(-10, 10, num = len(x_arr)) #values -10 10 need to be modified based on the linear system
        ax.plot(x_arr_new, y_arr, zdir='z', zs=-50, color=color)
      else:
        print("Cannot plot this function!")

x_arr = np.arange(-10, 10.1, 0.1)
fig = plt.figure()
ax= fig.add_subplot(projection= '3d')
plotEquation3D(ax, x_arr, 25, 5, 1, 106.8, "blue")
plotEquation3D(ax, x_arr, 64, 8, 1, 177.2, "green")
plotEquation3D(ax, x_arr, 144, 12, 1, 279.2, "red")

plt.title("System 1")
ax.set_xlim([-10, 10])
ax.set_ylim([-20, 20])
#ax.set_zlim([-50, 50])
plt.show()

# Exercise 4
#2D in 3D example :Plot function: z = sin(3*x^2 + y^2) with random x, y
import numpy as np
import matplotlib.pyplot as plt

x= np.random.random(100)
y= np.random.random(100)
z= np.sin(3*x**2+y**2)  # z = sin(3*x^2 + y^2)

fig= plt.figure()
ax= fig.add_subplot(111, projection= '3d')
ax.scatter(x,y,z)
ax.plot(x, z, 'r+', zdir='y', zs=1.5)
ax.plot(y, z, 'g+', zdir='x', zs=-0.5)
ax.plot(x, y, 'k+', zdir='z', zs=-1.5)

ax.set_xlim([-0.5, 1.5])
ax.set_ylim([-0.5, 1.5])
ax.set_zlim([-1.5, 1.5])

plt.show()

# Exercise 6
import sympy as sp
t, a0, a1, a2 = sp.symbols('t, a0, a1, a2')
pt = lambda t: a0 + a1*t + a2*t**2
print(pt(1))
print(pt(2))
print(pt(3))

#defining equations
pt1 = sp.Eq(pt(1), 6)
pt2 = sp.Eq(pt(2), 15)
pt3 = sp.Eq(pt(3), 38)

#eq2 = sp.Eq( x + y, 2)
sol = sp.solve((pt1, pt2, pt3), (a0, a1, a2))
print("Solution = ", sol)
print("The interpolating polynomial p(t) = ", sol[a0] + sol[a1] + sol[a2]*t**2)

# Exercise 7
import sympy as sp
c,p = sp.symbols('c,t')

eq1 = sp.Eq(3*c + 3.2*p,118.4)
eq2 = sp.Eq(3.5*c + 3.6*p, 135.2 )

sol = sp.solve((eq1,eq2),(c,p))

print("children : ", int(sol[c]))
print("adult : ", int(sol[p]))

# Exercise 12
import numpy as np

A = np.matrix([[2,5,9],
               [3,5,8],
               [4,4,7]])
A1 = A[:,[0,2]]
print(A1)

# Exercise 13
import numpy as np
A = np.matrix([[2,5,9,1],
               [3,5,8,9],
               [4,4,7,1],
               [7,6,5,4]])

A1 = A[[1,3],:]
print(A1)

# Exercise 14
import numpy as np
A = np.matrix([[2,5,9,1],
               [3,5,8,9],
               [4,4,7,1],
               [7,6,5,12]])
a1 = []

for i in range(0,4):
  for j in range(0,4):
    if (A[i,j] % 2 == 0):
      a1.append(A[i,j])

A1 = np.matrix(a1)
print(A1)