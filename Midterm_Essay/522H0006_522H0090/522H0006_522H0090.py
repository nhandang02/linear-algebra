# -*- coding: utf-8 -*-
"""522H0006_522h0090.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YUhwN5oerxq3oUyIZDzT9QkW30QvkjkR

**Đặng Thành Nhân-MSSV:522H0006, Võ Nhật Hào-MSSV:522H0090-Nhóm 8 tổ 2-Midterm-Essay**
"""

import numpy as np

A = np.random.randint(1, 101, (10, 10))

B = np.random.randint(1, 21, (2, 10))

C = np.random.randint(1, 21, (10, 2))

print("A = ", A, sep="\n")
print("B = ", B, sep="\n")
print("C = ", C, sep="\n")
print()

print("a)")
#a
A_T = A.T 
B_T = B.T 
C_T = C.T 

print(A + A_T + np.dot(C, B) + np.dot(B_T, C_T))
print()

print("b)")
#b
D = np.zeros((10, 10))
for i in range(10, 19+1):
    j = i - 9 
    D += (A/i)**j 
print(D)
print()

print("c)")
#c
odd_row = A[1::2]
print("odd_row = ", odd_row, sep="\n")
print()

print("d)")
#d
odd_vector = []
for i in A.flatten():
  if(i % 2 != 0):
    odd_vector.append(i)
print("odd_vector =", odd_vector)
print()

print("e)")
# e
def is_prime(n):
  if n<=1:
    return False
  for i in range(2, int(np.sqrt(n))+1):
    if n % i == 0:
      return False
  return True

prime_vectorA = []
for x in A.flatten():
  if(is_prime(x)):
    prime_vectorA.append(x)
print("prime_vectorA =", prime_vectorA) 
print()

print("f)")
#f
D = np.dot(C, B)

print("D = ", D, sep="\n")

for i in range(D.shape[0]):
  if i % 2 != 0 :
    D[i] = D[i][::-1]

print()
print("After reverse the odd rows D = ", D, sep="\n")
print()

print("g)")
# g
max_count = 0
max_rows = []

for i in range(A.shape[0]):

    count = 0
    for j in range(A.shape[1]):
        if is_prime(A[i,j]):
            count += 1
    if count > max_count:
        max_count = count
        max_rows = [A[i, :]]
    elif count == max_count:
        max_rows.append(A[i, :])

for row in max_rows:
    print(row)
print()

print("h)")
# h
maxOdd_len = 0 
maxOdd_rows = []

for i in range(A.shape[0]):
    currentOdd_len = 0
    maxOdd_in_row = 0
    
    for j in range(A.shape[1]):
        if A[i,j] % 2 != 0:
            currentOdd_len += 1
            if currentOdd_len > maxOdd_in_row:
                maxOdd_in_row = currentOdd_len
        else:
            currentOdd_len = 0 
    if maxOdd_in_row > maxOdd_len:
        maxOdd_len = maxOdd_in_row
        maxOdd_rows = [A[i, :]] 
    elif maxOdd_in_row == maxOdd_len:
        maxOdd_rows.append(A[i,:])

for row in maxOdd_rows:
    print(row)