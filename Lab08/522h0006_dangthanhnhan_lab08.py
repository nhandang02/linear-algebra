# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab08

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x3OPnUoOLk-r93HGMcT70auiRCwLTmrQ

**Đặng Thành Nhân-MSSV:522H0006-Nhóm 8 tổ 2 -Lab8**
"""

# Exercise 1
import numpy as np
A = np.array([[2, 2], [2, 3]])
b = np.array([4, 6])

x = np.linalg.lstsq(A, b, rcond=None)[0]
print("x [by lstsq function] =", x)
print("A*x = ", np.matmul(A, x))

A = np.array([[2, 1, 1], [1, 2, 1]])
A = np.transpose(A)
b = [2, 0, -3]
x = np.linalg.lstsq(A, b, rcond=None)[0]
print("x [by lstsq function] = ", round(x[0],5), round(x[1],5))

# Exercise 2
import numpy as np

# Define the matrix A and the vector b
A = np.array([[0, 0, 1],
              [0, 1, 1],
              [1, 2, 1],
              [1, 0, 1],
              [4, 1, 1],
              [4, 2, 1]])
b = np.array([0.5, 1.6, 2.8, 0.8, 5.1, 5.9])

# Find the least squares solution
x = np.linalg.lstsq(A, b, rcond=None)[0]

# Print the result
print("Least squares solution:")
print("c =", x[0])
print("d =", x[1])
print("e =", x[2])

# Exercise 3
import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([0, 1, 2, 3])
y1 = np.array([1, 1, 2, 2])

x2 = np.array([1, 2, 4, 5])
y2 = np.array([0, 1, 2, 3])

x3 = np.array([-1, 0, 1, 2])
y3 = np.array([0, 1, 2, 4])

x4 = np.array([2, 3, 5, 6])
y4 = np.array([3, 2, 1, 0])

def draw(matrix1, matrix2):
  A = np.vstack([x, np.ones(len(x))]).T

  a = np.linalg.lstsq(A, y, rcond=None)[0]

  print("a0 = {}, a1 = {}".format(a[1], a[0]))

  y_ls = lambda x: a[1] + a[0]*x
  x_arr = np.arange(-5, 5.1, 0.1)
  y_arr = list(map(y_ls, x_arr))

  plt.scatter(x, y, color="blue", label="data points")
  plt.plot(x_arr, y_arr, "r", label="least squares line")

  plt.title("A least squares line that best fits the given data points")
  plt.legend()
  plt.show()

# a
print("a)")
draw(x1, y1)

# b
print("b)")
draw(x2, y2)

# c
print("c")
draw(x3, y3)

# d
print("d")
draw(x4, y4)

# Exercise 4
import matplotlib.pyplot as plt
import numpy as np

mileage = [2000, 6000, 20000, 30000, 40000]
friction = [20, 18, 10, 6, 2]

A = np.vstack([mileage, np.ones(len(mileage))]).T
m, c = np.linalg.lstsq(A, friction, rcond=None)[0]

x = np.linspace(0, 45000, 1000)
y = m * x + c

plt.plot(mileage, friction, "o", label="Data points")
plt.plot(x, y, label="Line of best fit")
plt.legend()
plt.xlabel("Mileage")
plt.ylabel("Friction index")
plt.title("Linear Regression: Mileage vs Friction Index")
plt.show()

print("Slope (m): ", round(m, 3))
print(("Y-intercept (c): ", round(c, 3)))

# Exercise 5
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def func(x, A, B):
    return A * np.cos(x) + B * np.sin(x)

x_data = np.array([1, 2, 3])
y_data = np.array([7.9, 5.4, -9])

popt, pcov = curve_fit(func, x_data, y_data)

A = popt[0]
B = popt[1]

print("A =", A)
print("B =", B)

x_fit = np.linspace(0, 4, 100)
y_fit = func(x_fit, A, B)
plt.plot(x_data, y_data, "bo", label = "data")
plt.plot(x_fit, y_fit, "r", label = "fit")
plt.legend()
plt.show()

# Exercise 6
import numpy as np
import matplotlib.pyplot as plt

x = np.array([1, 2, 3, 4, 5, 6])
y = np.array([2.1, 3.5, 4.2, 3.1, 4.4, 6.8])

coeffs = np.polyfit(x, y, 3)
cubic_model = np.poly1d(coeffs)

x_range = np.linspace(1, 6, 100)
y_range = cubic_model(x_range)

plt.scatter(x, y, color = "black", label = "data points")
plt.plot(x_range, y_range, color = "blue", label = "cubic fit")
plt.legend()
plt.xlabel('Time in Days')
plt.ylabel('Grams')
plt.title("Cubic Model Fit For Bacteria Growth Data")
plt.show()

# Exercise 7
import matplotlib.pyplot as plt

#a
#khai bao vecto x thuộc R2
x = [2, 3]
#sau khi nhân S
print("'a)")
s = ([[2,0],
      [0,2]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.xlim(-1, 10)
plt.ylim(-1, 10)
plt.title("a")
plt.grid()
plt.legend()
plt.show()

#b
print("'b)")
s = ([[0.5,0],
      [0,0.5]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-1, 10)
plt.ylim(-1, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

#c
print("'c)")
s = ([[1,0],
      [0,-1]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-1, 10)
plt.ylim(-10, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

#d
print("'d)")
s = ([[-1,0],
      [0,1]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

# Exercise 8
import numpy as np
import matplotlib.pyplot as plt
import math

v = np.array([1, 2])
pi = math.pi

R = np.array([[np.cos(pi), -np.sin(pi)], [np.sin(pi), np.cos(pi)]])

w = R @ v

plt.arrow(0, 0, v[0], v[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, w[0], w[1], color='r', width=0.1, label='Transformed')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.title("phi = pi")
plt.grid()
plt.legend()
plt.show()

#b
R = np.array([[np.cos(pi/3), -np.sin(pi/3)], [np.sin(pi/3), np.cos(pi/3)]])

w = R @ v

plt.arrow(0, 0, v[0], v[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, w[0], w[1], color='r', width=0.1, label='Transformed')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.title("phi = pi/3")
plt.grid()
plt.legend()
plt.show()