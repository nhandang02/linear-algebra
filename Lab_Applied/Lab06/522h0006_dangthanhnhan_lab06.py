# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sAYiKJz_kp6vasYjXmTC0Z1n6V3y94Hf

**Đặng Thành Nhân-MSSV:522H0006-Nhóm 8 tổ 2 -Lab6**
"""

# Exercise 1
import numpy as np

A1 = np.array([[1, -7], [-2, -3]])
print("norm1_A1 = ", np.linalg.norm(A1, 1))
A2 = np.array([[-2, 8], [3, 1]])
print("norm1_A2 = ", np.linalg.norm(A2, 1))
A3 = np.array([[2, -8], [3, 1]])
print("norm1_A3 = ", np.linalg.norm(A3, 1))
A4 = np.array([[2, 3], [1, -1]])
print("norm1_A4 = ", np.linalg.norm(A4, 1))
A5 = np.array([[5, -4, 2], [-1, 2, 3], [-2, 1, 0]])
print("norm1_A5 = ", np.linalg.norm(A5, 1))

# Exercise 2
import numpy as np

B1 = np.array([[1, -7], [-2, -3]])
print("norm-inf_B1 = ", np.linalg.norm(B1, np.inf))
B2 = np.array([[3, 6], [1, 0]])
print("norm-inf_B2 = ", np.linalg.norm(B2, np.inf))
B3 = np.array([[5, -4, 2], [-1, 2, 3], [-2, 1, 0]])
print("norm-inf_B3 = ", np.linalg.norm(B3, np.inf))
B4 = np.array([[3, 6, -1], [3, 1, 0], [2, 4, -7]])
print("norm-inf_B4 = ", np.linalg.norm(B4, np.inf))
B5 = np.array([[-3, 0, 0], [0, 4, 0], [0, 0, 2]])
print("norm-inf_B5 = ", np.linalg.norm(B5, np.inf))

# Exercise 3
import numpy as np

C1 = np.array([[5, -4, 2], [-1, 2, 3], [-2, 1, 0]])
print("norm-fro_C1 = ", np.linalg.norm(C1, 'fro'))
C2 = np.array([[1, 7, 3], [4, -2, -2], [-2, -1, 1]])
print("norm-fro_C2 = ", np.linalg.norm(C2, 'fro'))
C3 = np.array([[2, 3], [1, -1]])
print("norm-fro_C3 = ", np.linalg.norm(C3, 'fro'))

# Exercise 4
import numpy as np
import math

u1 = np.array([[1], [1]])
v1 = np.array([[0], [1]])

norm_u1 = np.linalg.norm(u1,2)
norm_v1 = np.linalg.norm(v1,2)
dotpro = np.dot(u1.T, v1) / (norm_u1*norm_v1)

angle_rad = math.acos(dotpro)
angle_deg = math.degrees(angle_rad)

print("a) Angle between u and v: ", angle_deg)

u2 = np.array([[1], [0]])
v2 = np.array([[0], [1]])

norm_u2 = np.linalg.norm(u2,2)
norm_v2 = np.linalg.norm(v2,2)
dotpro = np.dot(u2.T, v2) / (norm_u2*norm_v2)

angle_rad = math.acos(dotpro)
angle_deg = math.degrees(angle_rad)

print("b) Angle between u and v: ", angle_deg)

u3 = np.array([[-2], [3]])
v3 = np.array([[1/2], [-1/2]])

norm_u3 = np.linalg.norm(u3,2)
norm_v3 = np.linalg.norm(v3,2)
dotpro = np.dot(u3.T, v3) / (norm_u3*norm_v3)

angle_rad = math.acos(dotpro)
angle_deg = math.degrees(angle_rad)

print("c) Angle between u and v: ", angle_deg)

# Excersice 5
import numpy as np
import math

u = np.array([2, 3])
unit_u = u / np.linalg.norm(u)
print ("a) Unit vector of u is", unit_u, "with 2-norm =", np. linalg.norm (unit_u))

u = np.array([1, 2, 3])
unit_u = u / np.linalg.norm(u)
print ("b) Unit vector of u is", unit_u, "with 2-norm =", np. linalg.norm (unit_u))

u = np.array([1/2, -1/2 , 1/4])
unit_u = u / np.linalg.norm(u)
print ("c) Unit vector of u is", unit_u, "with 2-norm =", np. linalg.norm (unit_u))

u = np.array([math.sqrt(2), 2, -math.sqrt(2), math.sqrt(2)])
unit_u = u / np.linalg.norm(u)
print ("d) Unit vector of u is", unit_u, "with 2-norm =", np. linalg.norm (unit_u))

# Exercise 6
import numpy as np

v1 = np.array([1, 2, 3])
s2 = np.array([7, 4, 3])
s3 = np.array([2, 1, 9])

print("Distance between v1 ad s2 = ", np.linalg.norm(v1-s2))
print("Distance between s1 ad s3 = ", np.linalg.norm(v1-s3))
print("Distance between s2 ad s3 = ", np.linalg.norm(s2-s3))

# Exercise 7

import numpy as np
E7 = np.array([[80,98,99,85,106,94],[71,92,76,95,100,92],[124,163,140,160,176,161]])
A7 = np.array([[1,2,3],[2,1,2],[3,2,4]])
A7_1 = np.linalg.inv(A7)
D7 = np.matmul(A7_1,E7)
print("message D = \n",D7)

#Cách 1:
lchar = list(map(chr, range(97 - 32, 123 - 32)))
lchar.append(" ")
print("lchar = ",lchar)
lchar_ship3 = []  #message
s = ""

for col in range(0,6):
    for row in range(0,3):
      k = int(round(D7[row,col],0))
      #print(k-4)
      #print(lchar[k - 4]) #shift 3 but index of list start with 0
      s += lchar[k - 4]
print("message = ",s)
print("end")

# Exercise 8
import numpy as np

A = np.array([[3, 4, 5], [1, 3, 1], [1, 1, 2]])

def encode_message(message):
    A = [[3, 4, 5], [1, 3, 1], [1, 1, 2]]
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
    encoded_message = ""
    for i in range(0, len(message)):
        char = message[i].upper()
        if char in alphabet:
            index = alphabet.index(char)
            encoded_char = ""
            for j in range(0, 3):
                encoded_char += str((A[j][0] * index) % 27 + (A[j][1] * index) % 27 + (A[j][2] * index) % 27) + " "
            encoded_message += encoded_char
    return encoded_message

message1 = "ATTACK"
message2 = "LINEAR ALGEBRA LABORATORY"
encoded_message1 = encode_message(message1)
encoded_message2 = encode_message(message2)
print("encoded_message1: ", encoded_message1)
print("encoded_message2: ", encoded_message2)

# Exercise 9
import numpy as np

def cosine_similarity(matrix):
    product = np.dot(matrix, matrix.T)

    norm = np.sqrt(np.sum(matrix**2, axis=1))

    outer_norm = np.outer(norm, norm)

    cosine_similarity_matrix = product / outer_norm

    return cosine_similarity_matrix

matrix = np.array([[0, 4, 0, 0, 0, 2, 1, 3],
                            [3, 1, 4, 3, 1, 2, 0, 1],
                            [3, 0, 0, 0, 3, 0, 3, 0],
                            [0, 1, 0, 3, 0, 0, 2, 0],
                            [2, 2, 2, 3, 1, 4, 0, 2]])

cosine_similarity_matrix = cosine_similarity(matrix)

print(cosine_similarity_matrix)

# Exercise 10
import numpy as np

def retrieve_nearest_doc(q, doc_vectors):

    similarities = np.dot(doc_vectors, q) / (np.linalg.norm(doc_vectors, axis=1) * np.linalg.norm(q))

    nearest_doc_idx = np.argmax(similarities)

    return nearest_doc_idx

doc_vectors = np.array([[1.0, 0.5, 0.3, 0, 0, 0],
                        [0.5, 1.0, 0, 0, 0, 0],
                        [0, 1.0, 0.8, 0.7, 0, 0],
                        [0, 0.9, 1.0, 0.5, 0, 0],
                        [0, 0, 0, 1.0, 0, 1.0],
                        [0, 0, 0, 0, 0.7, 0],
                        [0.5, 0, 0.7, 0, 0, 0.9],
                        [0, 0.6, 0, 1.0, 0.3, 0.2]])

q = np.array([0, 0, 0.7, 0.5, 0, 0.3])

nearest_doc_idx = retrieve_nearest_doc(q, doc_vectors)

print("The nearest document is D{}".format(nearest_doc_idx+1))