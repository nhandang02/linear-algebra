# -*- coding: utf-8 -*-
"""522H0006_DangThanhNhan_Lab3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ghnyNIjhQuVHZ9UYHqsFPpICN4FKP3zO

**Đặng Thành Nhân-MSSV:522H0006-Nhóm 8 tổ 2 -Lab3**
"""

# Exercise 8
import numpy as np
N = np.array([[12, 15, 10, 16, 12],
              [5, 9, 14, 7, 10],
              [8, 12, 10, 9, 15]])
P = np.array([2, 1, 3])
print("N =")
print(N)
print()
print("P =")
print(P)

# R = P.dot(N) #cach1
N1 = P.T #cach2
R = np.matmul(N1, N)
print("The total sales for each day: ")
print(R)

# Exercise 9
import numpy as np
T = np.array([[0.6, 0.7],
             [0.4, 0.3]])
p = np.array([[0.5],
             [0.5]])
k = np.array([1, 2, 10, 100, 100000])

Tk = np.array(T)
for i in range(1, 100000+1):
  # N = np.matmul(T**i, p)
  pk = np.matmul(Tk, p)
  Tk = np.matmul(Tk, T)
  if i==1 or i==2 or i==10 or i==100 or i==100000:
    print("k = ",i )
    print("pk = ")
    print(pk)
    print()

# Exercise 10
import numpy as np

A = np.array([[-1, 4, 8],
             [-9, 1, 2]])
B = np.array([[5, 8],
              [0, -6],
              [5, 6]])
C = np.array([[-4, 1],
              [6, 5]])
D = np.array([[-6, 3, 1],
              [8, 9, -2],
              [6, -1 ,5]])

# a
print("a)")
B1 = B.T
if(len(A) == len(B1[0])): print(np.matmul(A, B1))
else:  print("Impossible")
print()

# b
print("b)")
C1 = C.T
if(len(B) == len(C1[0])): print(np.matmul(B, C1))
else:  print("Impossible")
print()

# c
print("c)")
if(len(C) == len(C1[0])): print(C-C1)
else:  print("Impossible")
print()

# d
print("d)")
if(len(D) == len(D.T[0])): print(D-D.T)
else:  print("Impossible")
print()

# e
print("e)")
print((D.T).T)
print()

# f
print("f)")
print(2*C.T)
print()

# Exercise 11
import numpy as np

A = np.array([[2, 4, 1],
              [6, 7, 2],
             [3, 5, 9]])

# a
print("a)")
a,b = A.shape
if(a==b): print("Square")
else: print("Not square")
print()

# b
print("b)")
AT = A.T
if(np.allclose(A, AT)==True): print("Symetric")
else: print("Not symetric")
print()

# c
print("c)")
AT = A.T
if(np.allclose(A, AT*-1)==True): print("Skew-Symetric")
else: print("Not Skew-symetric")
print()

# d
print("d)")
print("Uper triangular")
print(np.triu(A))
print()

# e
print("e)")
print("Lower triangular")
print(np.tril(A))

# Exercise 12
import numpy as np
A = np.array([[6, 0, 0, 5],
             [1, 7, 2, -5],
             [2, 0, 0, 0],
             [8, 3, 1, 8]])
B = np.array([[1, -2, 5, 2],
              [0, 0, 3, 0],
              [2, -6, -7, 5],
              [5, 0, 4, 4],])
C = np.array([[3, 5, -8, 4],
              [0, -2, 3, -7],
              [0, 0, 1, 5],
              [0, 0, 0, 2]])
D = np.array([[4, 0, 0, 0],
              [7, -1, 0, 0],
              [2, 6, 3, 0],
              [5, -8, 3, 0],
              [5, -8, 4, 3]])
E = np.array([[4, 0, -7, 3, -5],
              [0, 0, 2, 0, 0],
              [7, 3, -6, 4, -8],
              [5, 0, 5, 2, 3],
              [0, 0, 9, -1, 2]])
F = np.array([[6, 3, 2, 4, 0],
              [9, 0, -4, 1, 0],
              [8, -5, 6, 7, 1],
              [3, 0, 0, 0, 0],
              [4, 2, 3, 2, 0]])

F = np.array(F)
print("F = ")
print(F)
print()
if(A.shape[1] == A.shape[0]):
  print("a) Matrix is square, determinant = ", np.linalg.det(A))
else:
  print("a) Matrix is not square")
print()
if(B.shape[1] == B.shape[0]):
  print("b) Matrix is square, determinant = ", np.linalg.det(B))
else:
  print("b) Matrix is not square")
print()
if(C.shape[1] == C.shape[0]):
  print("c) Matrix is square, determinant = ", np.linalg.det(C))
else:
  print("c) Matrix is not square")
print()
if(D.shape[1] == D.shape[0]):
  print("d) Matrix is square, determinant", np.linalg.det(D))
else:
  print("d) Matrix is not square")
print()
if(E.shape[1] == E.shape[0]):
  print("e) Matrix is square, determinant = ", np.linalg.det(E))
else:
  print("e) Matrix is not square")
print()
if(F.shape[1] == F.shape[0]):
  print("f) Matrix is square, determinant = ", np.linalg.det(F))
else:
  print("f) Matrix is not square")

# Exercise 13
import numpy as np

print("It is not true, because : ")

#tao ma tran random
A = np.random.rand(5, 5)
B = np.random.rand(5, 5)

# Tinh det(A + B) - det(A) - det(B)
sum = np.linalg.det(A + B)
det_A = np.linalg.det(A)
det_B = np.linalg.det(B)

result = sum - det_A - det_B
print("Result 5x5:", result)

for n in [3, 4, 6]:
    A = np.random.rand(n, n)
    B = np.random.rand(n, n)

    sum = np.linalg.det(A + B)
    det_A = np.linalg.det(A)
    det_B = np.linalg.det(B)

    result = sum - det_A - det_B
    print(f"Result {n}x{n}:", result)

# Exercise 14
import numpy as np

print("Yes it true, because : ")

for i in range(1,5):
  print("case ", i)
  A = np.random.rand(3, 3)
  B = np.random.rand(3, 3)

  a = np.linalg.det(np.matmul(A,B))
  b = (np.linalg.det(A))*(np.linalg.det(B))
  kq = a - b;
  print(" detAB - (detA)*(detB) = ", b, " # 0")

# Exercise 15
import numpy as np
A = np.array([[2, 4, 5/2],
              [-3/4, 2, 1/4],
              [1/4, 1/2, 2]])
B = np.array([[1, -1/2, 3/4],
              [3/2, 1/2, -2],
              [1/4, 1, 1/2]])

print("Inverse matrix of A =")
print(A_inv)
print()

print("True result if Multiplication A x A_inv = I")
print(np.matmul(A, A_inv))
print()

print("Inverse matrix of B =")
print(B_inv)
print()

print("True result if Multiplication B x B_inv = I")
print(np.matmul(B, B_inv))
print()

print("a)")
print("Multiplication A_inv x B_inv")
print(np.matmul(A_inv, B_inv))
print()

print("Multiplication (A x B)_inv")
C = np.matmul(A, B)
C_inv = np.linalg.inv(C)
print(C_inv)
print()

print("Multiplication (B x A)_inv")
D = np.matmul(B, A)
D_inv = np.linalg.inv(D)
print(D_inv)
print()

print("b)")
print("(A_inv).T")
print((A_inv).T)
print()

print("(A.T)_inv")
print(np.linalg.inv(A.T))